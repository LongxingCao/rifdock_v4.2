#ifndef INCLUDED_scheme_nest_maps_HecatonicosachoronMap_HH
#define INCLUDED_scheme_nest_maps_HecatonicosachoronMap_HH

#include <Eigen/Dense>
#include "scheme/util/SimpleArray.hh"
#include <boost/static_assert.hpp>
#include <iostream>
#include <vector>

namespace scheme {
namespace nest {
namespace pmap {

	using namespace Eigen;
	using std::cout;
	using std::endl;

	///@brief flip through origin iff q.w < 0
	template<class Q> Q to_half_cell(Q const & q){ return q.w()>=0 ? q : Q(-q.w(),-q.x(),-q.y(),-q.z()); }

	template<class T>
	static T const * get_h120(){
		static T const h120[240] = {
			0,0,0,1,
			0.86038549269738884,-0.28373153440121657,0.42335944579305518,0,
			0.28373973576784017,-0.42337001948008257,-0.86037758510541762,0,
			0.36038563963318637,-0.78374092181607713,-0.076631313554346769,0.5,
			0.29936918141049967,-0.40773789835886387,0.29936499841502906,0.80901699437494745,
			0.40774360684107541,-0.29936287571009723,-0.29936352907349539,0.80901699437494745,
			-0.12399657426770841,-0.56101867580362552,-0.12399353927501722,0.80901699437494745,
			0.78374688563756956,-0.3603721640988623,0.076633690998889337,0.5,
			-0.076626800580467558,-0.78374014200373898,0.36038829509954934,0.5,
			0.098726703277445094,-0.60838567182649494,-0.60837481241105906,0.5,
			0.48438951070642167,-0.65973377804609168,0.48438274247757546,0.3090169943749474,
			0.65974301456433426,-0.48437930786884764,-0.48438036503303294,0.3090169943749474,
			-0.2006306716537028,-0.90774728577372432,-0.20062576093237286,0.3090169943749474,
			0.70711278825157509,-0.7071007740689611,1.4693415336664017e-06,0,
			0.17537260714279126,-0.96875657416248939,0.1753714591400119,0,
			0.28374703257336703,-0.86038155151372275,-0.42335706834851272,0,
			0.076645903865346199,-0.3603709023359945,0.78374627155107079,0.5,
			0.56101631128688911,0.1240063639576473,0.12399444737802612,0.80901699437494745,
			-0.12400387107323524,-0.12400714376998535,-0.56101405603192223,0.80901699437494745,
			-0.29935737493114789,-0.29936161394722949,0.40774905147868612,0.80901699437494745,
			0.60838608497413005,-0.098715102242466185,0.60837628175259262,0.5,
			-0.60837427849477821,-0.6083844100636272,0.098737768141122562,0.5,
			0.36037383315383459,-0.076641409509983771,-0.783745363448062,0.5,
			0.96875991812796469,-0.17535651175244993,-0.17536908169546928,0,
			1.1806479351811339e-05,-0.70709951230609336,0.70711404989371518,0,
			0.78373958883204264,0.076639367934777936,-0.36038682575801567,0.5,
			-0.56101631128688911,-0.1240063639576473,-0.12399444737802612,0.80901699437494745,
			0.12400387107323524,0.12400714376998535,0.56101405603192223,0.80901699437494745,
			0.29935737493114789,0.29936161394722949,-0.40774905147868612,0.80901699437494745,
			0.90774345990527794,0.20064651170476328,0.20062723027390655,0.3090169943749474,
			-0.20064247813305458,-0.20064777346763107,-0.90773981082608812,0.3090169943749474,
			-0.48437040742154297,-0.48437726629364181,0.65975182417304479,0.3090169943749474,
			0.42337305248373491,-0.28373075458887853,0.86037905444695129,0,
			0.70710098177222336,-1.26176286779911e-06,-0.70711258055218162,0,
			0.49999985306420247,0.50000938741486056,0.49999075934740195,0.5,
			-0.29936918141049967,0.40773789835886387,-0.29936499841502906,0.80901699437494745,
			-0.40774360684107541,0.29936287571009723,0.29936352907349539,0.80901699437494745,
			0.12399657426770841,0.56101867580362552,0.12399353927501722,0.80901699437494745,
			0.68502018236012452,0.24801350772763264,0.68500850340994834,0,
			0.17535350385791265,0.17535447017724404,-0.96876310751060835,0,
			0.42335394919885627,0.86038028975085501,-0.2837555122036689,0,
			-0.49999985306420247,-0.50000938741486056,-0.49999075934740195,0.5,
			-0.60838608497413005,0.098715102242466185,-0.60837628175259262,0.5,
			0.60837427849477821,0.6083844100636272,-0.098737768141122562,0.5,
			-0.36037383315383459,0.076641409509983771,0.783745363448062,0.5,
			-0.90774345990527794,-0.20064651170476328,-0.20062723027390655,0.3090169943749474,
			0.20064247813305458,0.20064777346763107,0.90773981082608812,0.3090169943749474,
			0.48437040742154297,0.48437726629364181,-0.65975182417304479,0.3090169943749474,
			0.86037368621803711,0.42336797790487679,-0.28375460410066,0,
			-0.78373958883204264,-0.076639367934777936,0.36038682575801567,0.5,
			-0.78374688563756956,0.3603721640988623,-0.076633690998889337,0.5,
			0.076626800580467558,0.78374014200373898,-0.36038829509954934,0.5,
			-0.098726703277445094,0.60838567182649494,0.60837481241105906,0.5,
			0.68501288555459761,0.68502503976127282,0.24798798665304331,0,
			-0.076645903865346199,0.3603709023359945,-0.78374627155107079,0.5,
			-0.48438951070642167,0.65973377804609168,-0.48438274247757546,0.3090169943749474,
			-0.65974301456433426,0.48437930786884764,0.48438036503303294,0.3090169943749474,
			0.2006306716537028,0.90774728577372432,0.20062576093237286,0.3090169943749474,
			0.24800044534094362,0.68502581957361097,0.68500759530693944,0,
			-0.36038563963318637,0.78374092181607713,0.076631313554346769,0.5
		};
		return h120;
	}
	template<class T>
	static T const * get_h120inv(){
		static T const h120inv[240] = {
			-0,-0,-0,1,
			-0.86038549269738862,0.28373153440121651,-0.42335944579305507,0,
			-0.28373973576784034,0.42337001948008285,0.86037758510541817,0,
			-0.36038563963318643,0.78374092181607735,0.076631313554346783,0.50000000000000011,
			-0.29936918141049967,0.40773789835886387,-0.29936499841502906,0.80901699437494745,
			-0.40774360684107547,0.29936287571009729,0.29936352907349545,0.80901699437494756,
			0.12399657426770844,0.56101867580362563,0.12399353927501724,0.80901699437494767,
			-0.78374688563756933,0.36037216409886225,-0.076633690998889323,0.49999999999999989,
			0.076626800580467586,0.78374014200373932,-0.3603882950995495,0.50000000000000022,
			-0.098726703277445135,0.60838567182649517,0.60837481241105928,0.50000000000000022,
			-0.48438951070642178,0.65973377804609179,-0.48438274247757557,0.30901699437494745,
			-0.65974301456433437,0.48437930786884775,0.48438036503303306,0.30901699437494745,
			0.20063067165370294,0.90774728577372488,0.200625760932373,0.30901699437494762,
			-0.7071127882515752,0.70710077406896121,-1.4693415336664022e-06,0,
			-0.17537260714279138,0.96875657416248995,-0.17537145914001201,0,
			-0.2837470325733672,0.8603815515137232,0.42335706834851294,0,
			-0.076645903865346227,0.36037090233599467,-0.78374627155107113,0.50000000000000022,
			-0.56101631128688911,-0.1240063639576473,-0.12399444737802612,0.80901699437494745,
			0.12400387107323525,0.12400714376998537,0.56101405603192234,0.80901699437494756,
			0.29935737493114795,0.29936161394722954,-0.40774905147868618,0.80901699437494756,
			-0.60838608497413016,0.098715102242466199,-0.60837628175259273,0.50000000000000011,
			0.60837427849477843,0.60838441006362742,-0.098737768141122589,0.50000000000000022,
			-0.36037383315383476,0.076641409509983799,0.78374536344806234,0.50000000000000022,
			-0.96875991812796447,0.1753565117524499,0.17536908169546925,0,
			-1.1806479351811344e-05,0.70709951230609369,-0.70711404989371551,0,
			-0.78373958883204276,-0.076639367934777949,0.36038682575801573,0.50000000000000011,
			0.56101631128688911,0.1240063639576473,0.12399444737802612,0.80901699437494745,
			-0.12400387107323525,-0.12400714376998537,-0.56101405603192234,0.80901699437494756,
			-0.29935737493114795,-0.29936161394722954,0.40774905147868618,0.80901699437494756,
			-0.90774345990527794,-0.20064651170476328,-0.20062723027390655,0.3090169943749474,
			0.20064247813305466,0.20064777346763116,0.90773981082608857,0.30901699437494751,
			0.48437040742154319,0.48437726629364203,-0.65975182417304512,0.30901699437494751,
			-0.42337305248373502,0.28373075458887859,-0.86037905444695151,0,
			-0.70710098177222347,1.2617628677991102e-06,0.70711258055218174,0,
			-0.49999985306420258,-0.50000938741486067,-0.49999075934740206,0.50000000000000011,
			0.29936918141049967,-0.40773789835886387,0.29936499841502906,0.80901699437494745,
			0.40774360684107547,-0.29936287571009729,-0.29936352907349545,0.80901699437494756,
			-0.12399657426770844,-0.56101867580362563,-0.12399353927501724,0.80901699437494767,
			-0.68502018236012452,-0.24801350772763264,-0.68500850340994834,0,
			-0.17535350385791276,-0.17535447017724415,0.9687631075106089,0,
			-0.42335394919885644,-0.86038028975085534,0.28375551220366901,0,
			0.49999985306420258,0.50000938741486067,0.49999075934740206,0.50000000000000011,
			0.60838608497413016,-0.098715102242466199,0.60837628175259273,0.50000000000000011,
			-0.60837427849477843,-0.60838441006362742,0.098737768141122589,0.50000000000000022,
			0.36037383315383476,-0.076641409509983799,-0.78374536344806234,0.50000000000000022,
			0.90774345990527794,0.20064651170476328,0.20062723027390655,0.3090169943749474,
			-0.20064247813305466,-0.20064777346763116,-0.90773981082608857,0.30901699437494751,
			-0.48437040742154319,-0.48437726629364203,0.65975182417304512,0.30901699437494751,
			-0.86037368621803723,-0.42336797790487685,0.28375460410066006,0,
			0.78373958883204276,0.076639367934777949,-0.36038682575801573,0.50000000000000011,
			0.78374688563756933,-0.36037216409886225,0.076633690998889323,0.49999999999999989,
			-0.076626800580467586,-0.78374014200373932,0.3603882950995495,0.50000000000000022,
			0.098726703277445135,-0.60838567182649517,-0.60837481241105928,0.50000000000000022,
			-0.68501288555459783,-0.68502503976127305,-0.24798798665304339,0,
			0.076645903865346227,-0.36037090233599467,0.78374627155107113,0.50000000000000022,
			0.48438951070642178,-0.65973377804609179,0.48438274247757557,0.30901699437494745,
			0.65974301456433437,-0.48437930786884775,-0.48438036503303306,0.30901699437494745,
			-0.20063067165370294,-0.90774728577372488,-0.200625760932373,0.30901699437494762,
			-0.24800044534094373,-0.68502581957361131,-0.68500759530693978,0,
			0.36038563963318643,-0.78374092181607735,-0.076631313554346783,0.50000000000000011
		};
		return h120inv;
	}

	template<class Int>
	static Int const * get_h120_nbrs(){
		static Int const h120_nbrs[60*12] = {
			4,5,6,17,18,19,26,27,28,35,36,37,
			7,10,13,20,23,29,32,38,42,45,50,55,
			9,11,15,22,30,33,39,44,46,52,56,58,
			4,5,6,7,8,9,10,11,12,13,14,15,
			0,3,5,6,7,8,10,16,17,19,20,27,
			0,3,4,6,7,9,11,17,18,22,25,28,
			0,3,4,5,8,9,12,18,19,21,26,41,
			1,3,4,5,10,11,13,17,20,23,25,29,
			3,4,6,10,12,14,16,19,21,24,31,40,
			2,3,5,6,11,12,15,18,22,30,41,58,
			1,3,4,7,8,13,14,16,20,24,32,55,
			2,3,5,7,9,13,15,22,23,25,33,56,
			3,6,8,9,14,15,21,40,41,53,57,58,
			1,3,7,10,11,14,15,23,50,55,56,59,
			3,8,10,12,13,15,24,40,51,55,57,59,
			2,3,9,11,12,13,14,52,56,57,58,59,
			4,8,10,19,20,24,27,31,32,39,44,46,
			0,4,5,7,20,25,27,28,29,34,37,43,
			0,5,6,9,22,26,28,30,35,41,42,54,
			0,4,6,8,16,21,26,27,31,36,44,49,
			1,4,7,10,16,17,27,29,32,34,38,46,
			6,8,12,19,26,31,40,41,45,48,49,53,
			2,5,9,11,18,25,28,30,33,39,47,54,
			1,7,11,13,25,29,33,45,48,49,50,56,
			8,10,14,16,31,32,39,40,47,51,54,55,
			5,7,11,17,22,23,28,29,33,43,47,48,
			0,6,18,19,21,35,36,41,42,45,49,50,
			0,4,16,17,19,20,34,36,37,44,46,52,
			0,5,17,18,22,25,35,37,43,47,51,54,
			1,7,17,20,23,25,34,38,43,45,48,53,
			2,9,18,22,32,38,39,41,42,46,54,58,
			8,16,19,21,24,33,39,40,44,47,48,49,
			1,10,16,20,24,30,38,39,42,46,54,55,
			2,11,22,23,25,31,39,44,47,48,49,56,
			17,20,27,29,37,38,43,46,52,53,57,58,
			0,18,26,28,36,37,42,50,51,54,55,59,
			0,19,26,27,35,37,44,49,50,52,56,59,
			0,17,27,28,34,35,36,43,51,52,57,59,
			1,20,29,30,32,34,41,42,45,46,53,58,
			2,16,22,24,30,31,32,33,44,46,47,54,
			8,12,14,21,24,31,43,47,48,51,53,57,
			6,9,12,18,21,26,30,38,42,45,53,58,
			1,18,26,30,32,35,38,41,45,50,54,55,
			17,25,28,29,34,37,40,47,48,51,53,57,
			2,16,19,27,31,33,36,39,46,49,52,56,
			1,21,23,26,29,38,41,42,48,49,50,53,
			2,16,20,27,30,32,34,38,39,44,52,58,
			22,24,25,28,31,33,39,40,43,48,51,54,
			21,23,25,29,31,33,40,43,45,47,49,53,
			19,21,23,26,31,33,36,44,45,48,50,56,
			1,13,23,26,35,36,42,45,49,55,56,59,
			14,24,28,35,37,40,43,47,54,55,57,59,
			2,15,27,34,36,37,44,46,56,57,58,59,
			12,21,29,34,38,40,41,43,45,48,57,58,
			18,22,24,28,30,32,35,39,42,47,51,55,
			1,10,13,14,24,32,35,42,50,51,54,59,
			2,11,13,15,23,33,36,44,49,50,52,59,
			12,14,15,34,37,40,43,51,52,53,58,59,
			2,9,12,15,30,34,38,41,46,52,53,57,
			13,14,15,35,36,37,50,51,52,55,56,57
		};
		return h120_nbrs;
	}

	template<class T>
	static T const * get_cellfaces(){
		// static T const cellfaces[36] = {
		static T const cellfaces[18] = {		
			// half are opposites of the other half!
			// 0.50931727232506019,-0.69368514566945905,0.50931015578810335,
			// 0.69369485751947446,-0.50930654442677104,-0.50930765599497663,
			// -0.2109555722674199,-0.95446198014589045,-0.21095040882944768,
			// 0.95445795738974371,0.21097222748273989,0.21095195378656478,
			// -0.21096798633445943,-0.2109735541787314,-0.95445412052082268,
			// -0.50929718594265139,-0.5093043977875642,0.69370412049024388,
			-0.95445795738974371,-0.21097222748273989,-0.21095195378656478,
			0.21096798633445943,0.2109735541787314,0.95445412052082268,
			0.50929718594265139,0.5093043977875642,-0.69370412049024388,
			-0.50931727232506019,0.69368514566945905,-0.50931015578810335,
			-0.69369485751947446,0.50930654442677104,0.50930765599497663,
			0.2109555722674199,0.95446198014589045,0.21095040882944768
		};
		return cellfaces;
	}

	template<class Float, class Index>
	Eigen::Map<Eigen::Quaternion<Float>const> h120_cellcen(Index const & i){
		return Eigen::Map<Eigen::Quaternion<Float>const>( get_h120<Float>() + 4*i );
	}
	template<class Float, class Index>
	Eigen::Map<Eigen::Quaternion<Float>const> h120_cellceninv(Index const & i){
		return Eigen::Map<Eigen::Quaternion<Float>const>( get_h120inv<Float>() + 4*i );
	}
	template<class Float, class Index, class Index2>
	Eigen::Map<Eigen::Quaternion<Float>const> h120_cellnbr(Index const & i,Index2 const & j){
		return Eigen::Map<Eigen::Quaternion<Float>const>( get_h120<Float>() + 4* get_h120_nbrs<uint8_t>()[12*i+j]  );
	}
	template<class Float, class Index, class Index2>
	Eigen::Map<Eigen::Quaternion<Float>const> h120_cellnbrinv(Index const & i,Index2 const & j){
		return Eigen::Map<Eigen::Quaternion<Float>const>( get_h120inv<Float>() + 4* get_h120_nbrs<uint8_t>()[12*i+j]  );
	}

	template<class Float> static double cell_width()    { return 1.12*0.61803398874989479; }
	template<class Float> static double cell_inradius() { return 1.12*0.61803398874989479/2.0; }


	template<
		int DIM=3,
		class Value=Eigen::Matrix3d,
		class Index=uint64_t,
		class Float=double
	>
	struct HecatonicosachoronMap {
		BOOST_STATIC_ASSERT_MSG(DIM==3,"HecatonicosachoronMap DIM must be == 3");

		static int const DIMENSION = DIM;
		typedef Value ValueType ;
		typedef Float FloatType ;		
		typedef Index IndexType ;		
		typedef util::SimpleArray<DIM,Index> Indices;
		typedef util::SimpleArray<DIM,Float> Params;		

		///@brief sets value to parameters without change
		///@return false iff invalid parameters
		bool params_to_value(
			Params const & params,
			Index cell_index,
			Index resl,
			Value & value
		) const {
			// cout << "        set p0 " << params << endl;
			Float const & w(cell_width<Float>());
			Matrix<Float,3,1> p(w*(params[0]-0.5), w*(params[1]-0.5), w*(params[2]-0.5));
			// cout << "      set p  " << p.transpose() << endl;

			Float corner = w * sqrt(3.0)/2.0 / (1<<resl);
			Float d1 = p.dot(Matrix<Float,3,1>(-0.95445795738974371,-0.21097222748273989,-0.21095195378656478));
			Float d2 = p.dot(Matrix<Float,3,1>(0.21096798633445943,0.2109735541787314,0.95445412052082268));
			Float d3 = p.dot(Matrix<Float,3,1>(0.50929718594265139,0.5093043977875642,-0.69370412049024388));
			Float d4 = p.dot(Matrix<Float,3,1>(-0.50931727232506019,0.69368514566945905,-0.50931015578810335));
			Float d5 = p.dot(Matrix<Float,3,1>(-0.69369485751947446,0.50930654442677104,0.50930765599497663));
			Float d6 = p.dot(Matrix<Float,3,1>(0.2109555722674199,0.95446198014589045,0.2109504088294476));
			if( fabs(d1)-corner >= cell_inradius<Float>() ||
			    fabs(d2)-corner >= cell_inradius<Float>() ||
			    fabs(d3)-corner >= cell_inradius<Float>() ||
			    fabs(d4)-corner >= cell_inradius<Float>() ||
			    fabs(d5)-corner >= cell_inradius<Float>() ||
			    fabs(d6)-corner >= cell_inradius<Float>() ){ return false; }


				// 1 = w2 + x2 + y2 + z2
				// w = sqrt( 1 - x2 - y2 - z2 )
			Eigen::Quaternion<Float> q( sqrt(1.0-p.squaredNorm()), p[0], p[1], p[2] );
			assert( fabs(q.squaredNorm()-1.0) < 0.000001 );
			// Eigen::Quaternion<Float> q( 1, p[0], p[1], p[2] );
			// q.normalize();

			// cout << "    set q0 " << q.coeffs().transpose() << endl;
			// cout << "  set ci " << cell_index << endl;

			q = h120_cellcen<Float>(cell_index)*q;
			// cout << "set q  " << q.coeffs().transpose() << endl;
			value = q.matrix();
			return true;
		}

		///@brief sets params/cell_index from value
		///@note necessary for value lookup and neighbor lookup
		bool value_to_params(
			Value const & value,
			Index /*resl*/,
			Params & params,
			Index & cell_index
		) const {
			Quaternion<Float> q(value);
			// q = to_half_cell(q);
			// cout << "get q  " << q.coeffs().transpose() << endl;

			// compare to all cell centers... TODO: optimize this!
			Map< Matrix<double,4,60> const > h120( get_h120<Float>() );
			Matrix<Float,60,1> dots = ( q.coeffs().transpose() * h120 );
			double mx = - 9e9;
			for(int i = 0; i < 60; ++i){
				// cout << i << " " << dots[i] << endl;
				if( fabs(dots[i]) > mx ){ // TODO: needs fabs?
					mx = fabs(dots[i]);
					cell_index = i;
					// cout << i << " " << dots[i] << " " << cell_index << endl;
				}
			}
			// cout << "closest cell " << cell_index << endl;
			assert( cell_index < 60 );

			// cout << "  get ci " << cell_index << endl;

			q = h120_cellceninv<Float>(cell_index) * q;
			q = to_half_cell(q);
			// cout << q.w() << endl;
			assert( q.w() > 0.7 );

			// cout << "    get q0 " << q.coeffs().transpose() << endl;

			// cout << "      get p  " << q.x() << " " << q.y() << " " << q.z() << endl;

			params[0] = q.x()/cell_width<Float>() + 0.5;
			params[1] = q.y()/cell_width<Float>() + 0.5;			
			params[2] = q.z()/cell_width<Float>() + 0.5;

			// cout << "        get p0 " << params << endl;

			return true;
		}

		///@brief get parameter space repr of Value for particular cell
		///@note necessary only for neighbor lookup		
		void value_to_params_for_cell(
			Value const & value,
			Params & params
		) const ;

		///@brief return the cell_index of neighboring cells within radius of value
		///@note delta parameter is in "Parameter Space"
		template<class OutIter>
		void get_neighboring_cells(Value const & value, Float radius, OutIter out) const;

		///@brief aka covering radius max distance from bin center to any value within bin
		Float bin_circumradius(Index resl) const {
		}

		///@brief maximum distance from the bin center which must be within the bin
		Float bin_inradius(Index resl) const {
			// double const delta = 1.0/(double)(1ul<<resl);
			// Vec pworst = Vec(1,1,1);// - delta*Vec(2.0,0,0);
			// Vec pNest0 = Vec(1,1,1) - delta*Vec(1.0,1.0,0);
			// cube_to_sphere(pworst);
			// cube_to_sphere(pNest0);
			// pworst.normalize();
			// pNest0.normalize();
			// return pworst.distance(pNest0) * 0.5999; // should be half of curcumradius based on geometry
		}

		///@brief cell size
		Index num_cells() const { return 60; }
	};



}
}
}

#endif
